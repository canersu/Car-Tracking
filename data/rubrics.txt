* The README is included with the project and has instructions for building/running the project. ✓
* If any additional libraries are needed to run the project, these are indicated with cross-platform installation instructions. ✓
* You can submit your writeup as markdown or pdf. ✓
* The README describes the project you have built. ✓
* The README also indicates the file and class structure, along with the expected behavior or output of the program. ✓
* The README indicates which rubric points are addressed. The README also indicates where in the code (i.e. files and line numbers) that the rubric points are addressed. ✓
* The project code must compile and run without errors. ✓
* We strongly recommend using cmake and make, as provided in the starter repos. If you choose another build system, the code must compile on any reviewer platform. ✓
* A variety of control structures are used in the project. (i.e main.cpp l:23) ✓
* The project code is clearly organized into functions. (i.e main.cpp l:12) ✓
* The project reads data from an external file or writes data to a file as part of the necessary operation of the program. (i.e PreOps.cpp l:20-27) ✓
* The project code is organized into classes with class attributes to hold the data, and class methods to perform tasks. (i.e PreOps.h l:26-31) ✓
* All class data members are explicitly specified as public, protected, or private. (i.e DetectCar.h l:6, l:17) ✓
* All class members that are set to argument values are initialized through member initialization lists. (i.e DetectCar.cpp l:3-6) ✓
* All class member functions document their effects, either through function names, comments, or formal documentation. Member functions do not change program state in undocumented ways. ✓
* Appropriate data and functions are grouped into classes. Member data that is subject to an invariant is hidden from the user. State is accessed via member functions. (i.e PreOps.cpp l:29-43)✓
* One function is overloaded with different signatures for the same function name. (i.e PreOps.cpp l:29-37) ✓
* At least two variables are defined as references, or two functions use pass-by-reference in the project code. (i.e DetectCar.cpp l:10, l:30) ✓
* At least one class that uses unmanaged dynamically allocated memory, along with any class that otherwise needs to modify state upon the termination of an object, uses a destructor. (i.e DetectCar.cpp l:7) ✓